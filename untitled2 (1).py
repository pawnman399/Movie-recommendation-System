# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UpoefEZn_BahWQTjeRzMjV2tMAa_vYnw
"""

import numpy as np
import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

movies_data = pd.read_csv('movies.csv')

movies_data.head()

movies_data.shape

#selecting features
selected_features = ['genres','keywords','tagline','cast','director','overview']
print(selected_features)

#replacing the null values with null string
for feature in selected_features:
    movies_data[feature] = movies_data[feature].fillna('')

#combining all the 5 selected features
combined_features = movies_data['genres']+''+movies_data['keywords']+'' +movies_data['tagline']+''+movies_data['cast']+''+movies_data['director']+''+movies_data['overview']
print(combined_features)

#converting text data into feature vectors
vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)



print(feature_vectors)

# getting the similarity scores using cosine similarity
similarity = cosine_similarity(feature_vectors)

print(similarity)

from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

wcss = []
for k in range(1, 20):  # Test up to 20 clusters
    kmeans = KMeans(n_clusters=k, random_state=42, n_init='auto')
    kmeans.fit(feature_vectors)
    wcss.append(kmeans.inertia_)

plt.plot(range(1, 20), wcss, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('WCSS (Inertia)')
plt.title('Elbow Method')
plt.show()

# Clustering
num_clusters = 10
kmeans = KMeans(n_clusters=num_clusters, random_state=42,n_init = 'auto')
clusters = kmeans.fit_predict(feature_vectors)
movies_data['cluster'] = clusters

# Visualize clusters using PCA
pca = PCA(n_components=2)
reduced_features = pca.fit_transform(feature_vectors.toarray())

plt.figure(figsize=(10, 8))
sns.scatterplot(x=reduced_features[:, 0], y=reduced_features[:, 1],
                hue=clusters, palette='viridis', s=100)
plt.title('Movie Clusters Visualization')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.legend(title='Cluster')
plt.show()

# Number of movies in each cluster
cluster_counts = movies_data['cluster'].value_counts().sort_index()
print("\nNumber of movies in each cluster:")
print(cluster_counts)

movies_data.head()

# Recommendation function
def recommend_movies(movie_name, num_recommendations=10):
    list_of_all_titles = movies_data['title'].tolist()
    find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

    if find_close_match:
        close_match = find_close_match[0]
        movie_cluster = movies_data[movies_data['title'] == close_match]['cluster'].values[0]

        # Get movies from the same cluster
        cluster_movies_indices = movies_data[movies_data['cluster'] == movie_cluster].index

        # Calculate similarity scores within the cluster
        similarity_scores = []
        movie_index = movies_data[movies_data['title'] == close_match].index[0]
        for index in cluster_movies_indices:
            similarity_scores.append((index, similarity[movie_index][index]))

        # Sort by similarity
        sorted_similar_movies = sorted(similarity_scores, key=lambda x: x[1], reverse=True)[1:num_recommendations+1]  # Exclude the movie itself

        print(f'Movies similar to {movie_name} (from the same cluster):\n')
        for i, (index, score) in enumerate(sorted_similar_movies):
            title_from_index = movies_data.iloc[index]['title']
            print(f'{i+1}. {title_from_index}')
    else:
        print(f'No close matches found for {movie_name}')

# Example
movie_name = input('Enter your favorite movie name: ')
recommend_movies(movie_name)

plt.figure(figsize=(10, 8))
sns.heatmap(similarity[:20, :20], cmap="YlOrRd")
plt.title("Movie Similarity")
plt.show()

# Select some interesting movies to compare
indices = [0, 5, 10, 15,21]  # Example indices
plt.figure(figsize=(8, 6))
sns.heatmap(
    similarity[indices][:, indices],
    cmap="YlOrRd",
    annot=True,
    xticklabels=movies_data['title'].iloc[indices],
    yticklabels=movies_data['title'].iloc[indices]
)
plt.title("Selected Movie Similarities")
plt.xticks(rotation=45)
plt.show()

print(similarity.shape)

#getting the movie name from user
movie_name = input('enter your favourite movie name :')

# creating a list with all the movie names given in the dataset
list_of_all_titles = movies_data['title'].tolist()
print(list_of_all_titles)

# finding the close match for the movie name given by the user
find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)
print(find_close_match)

close_match = find_close_match[0]
print(close_match)

#finding the index of the movie with title
index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]
print(index_of_the_movie)

#getting a list of similar movies
similarity_score = list(enumerate(similarity[index_of_the_movie]))
print(similarity_score)

len(similarity_score)

#sorting the movies based on their similarity score
sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)
print(sorted_similar_movies)

#print the name of simliar movies based on the index
print('movies suggested for you : \n')

i = 1
for movie in sorted_similar_movies:
    index = movie[0]
    title_from_index = movies_data[movies_data.index==index]['title'].values[0]
    if (i<10):
        print(i, '.',title_from_index)
        i+=1

"""Movie Recommendation System"""

movie_name = input(' Enter your favourite movie name : ')

list_of_all_titles = movies_data['title'].tolist()

find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

close_match = find_close_match[0]

index_of_the_movie = movies_data[movies_data.title == close_match]['index'].values[0]

similarity_score = list(enumerate(similarity[index_of_the_movie]))

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)


print('Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1